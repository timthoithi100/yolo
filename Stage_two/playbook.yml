---
- name: Orchestrate AWS Infrastructure Provisioning and Application Deployment
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    terraform_dir: "{{ lookup('env', 'PWD') }}/terraform"
    aws_region: "us-east-1"
    key_pair_name: "yolo-key"
    public_key_path: "/home/tim/.ssh/id_rsa.pub"

  tasks:
    - name: Ensure python and required AWS libraries are installed for terraform module
      ansible.builtin.pip:
        name:
          - boto3
          - botocore
          - terraform-external-data
        state: present
      become: yes

    - name: Initialize Terraform
      community.general.terraform:
        project_path: "{{ terraform_dir }}"
        state: present
      register: terraform_init_output
      delegate_to: localhost

    - name: Apply Terraform to provision AWS infrastructure
      community.general.terraform:
        project_path: "{{ terraform_dir }}"
        state: present
        variables:
          aws_region: "{{ aws_region }}"
          key_pair_name: "{{ key_pair_name }}"
          public_key_path: "{{ public_key_path }}"
        force_init: true
        targets:
          - aws_vpc.yolo_vpc
          - aws_subnet.yolo_subnet
          - aws_internet_gateway.yolo_igw
          - aws_route_table.yolo_route_table
          - aws_route_table_association.yolo_rta
          - aws_security_group.yolo_sg
          - aws_key_pair.yolo_key_pair
          - aws_instance.yolo_server
      register: terraform_output
      delegate_to: localhost

    - name: Get public IP from Terraform outputs
      set_fact:
        ec2_public_ip: "{{ terraform_output.outputs.instance_public_ip.value }}"

    - name: DEBUG: Print ec2_public_ip after set_fact (on localhost)
      ansible.builtin.debug:
        var: ec2_public_ip

    - name: Wait for SSH to become available on the EC2 instance
      ansible.builtin.wait_for:
        host: "{{ ec2_public_ip }}"
        port: 22
        timeout: 300
        delay: 10
      delegate_to: localhost

    - name: Add EC2 instance to in-memory inventory
      ansible.builtin.add_host:
        name: "{{ ec2_public_ip }}"
        groups:
          - provisioned_ec2_hosts
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
      delegate_to: localhost

- name: Configure EC2 Instance and Deploy Application
  hosts: provisioned_ec2_hosts
  remote_user: ubuntu
  become: yes
  gather_facts: yes
  vars:
    ansible_ssh_private_key_file: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"

  pre_tasks:
    - name: Ensure Python is installed on the remote host (for Ansible modules)
      ansible.builtin.raw: sudo apt update && sudo apt install -y python3 python3-pip
      register: install_python_result
      changed_when: "'installed' in install_python_result.stdout"
      failed_when: install_python_result.rc != 0 and 'already installed' not in install_python_result.stderr
      tags: always

  roles:
    - name: common
    - name: clone_app
    - role: mongo_deploy
      vars:
        public_ip_for_compose: "{{ ec2_public_ip }}"
    - name: backend_deploy
    - name: frontend_deploy
